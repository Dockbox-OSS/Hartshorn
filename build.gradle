import java.time.LocalDate

/*
 *  Copyright (C) 2020 Guus Lieben
 *
 *  This framework is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 2.1 of the
 *  License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 *  the GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this library. If not, see {@literal<http://www.gnu.org/licenses/>}.
 */
buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "io.franzbecker:gradle-lombok:$gradleLombokVersion"
        classpath 'org.owasp:dependency-check-gradle:6.2.2'
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'org.cadixdev.licenser' version "$licenserVersion"
    id 'io.freefair.aggregate-javadoc' version "$aggregateJavadocVersion"
}

apply plugin: 'org.owasp.dependencycheck'

static def getVersionName() {
    return 'git rev-parse --verify --short HEAD'.execute().text.trim()
}

version = getVersionName()
group project.pluginGroup
description 'Common sources for Hartshorn services'
def date = LocalDate.now().toString()

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(16)
    }
}

dependencyCheck {
    // Strict rule, even small vulnerabilities should be handled unless they are supressed
    failBuildOnCVSS = 1
    failOnError = true
}

subprojects { Project subProject ->
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'org.cadixdev.licenser'

    license {
        header = rootProject.file("HEADER.txt")
        ignoreFailures = true
        include '**/*.java'
    }

    group project.pluginGroup
    version = "${getVersionName()}-$date"

    sourceCompatibility = 16
    targetCompatibility = 16

    tasks.build {
        dependsOn tasks.updateLicenses
        finalizedBy tasks.clean
    }
}

allprojects {
    plugins.withType(JavaPlugin) {
        configurations.all {
            resolutionStrategy.dependencySubstitution {
                rootDir.listFiles().each {
                    if (it.isDirectory() && new File(it, "${it.name}.gradle").exists()) {
                        substitute module("org.dockbox.hartshorn:${it.name}") using project(":$it.name")
                    }
                }
            }
        }

        repositories {
            mavenCentral()
            maven {
                name 'Jitpack'
                url 'https://jitpack.io'
            }
            maven {
                name 'm2-dv8tion'
                url 'https://m2.dv8tion.net/releases'
            }
        }

        configurations {
            testImplementation.extendsFrom(implementation)
            all*.exclude group: 'junit', module: 'junit'
        }

        tasks.withType(JavaCompile) {
            options.compilerArgs << '-parameters'
            options.encoding = 'UTF-8'
        }

        test {
            useJUnitPlatform()
        }

        tasks.withType(Javadoc) {
            failOnError false
            options.addStringOption('Xdoclint:none', '-quiet')
            options.addStringOption('encoding', 'UTF-8')
            options.addStringOption('charSet', 'UTF-8')
        }

        dependencies {
            implementation "org.slf4j:slf4j-api:$slf4jVersion"
            implementation "org.projectlombok:lombok:$lombokVersion"
            implementation("org.jetbrains:annotations:$jetbrainsAnnotationsVersion")
            implementation "javax.persistence:javax.persistence-api:$javaxPersistenceVersion"

            annotationProcessor "org.projectlombok:lombok:$lombokVersion"
            testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

            testImplementation testFixtures(project(":hartshorn-test"))
            testImplementation "org.mockito:mockito-inline:$mockitoVersion"
            testImplementation "org.hamcrest:java-hamcrest:$hamcrestVersion"
            testImplementation "org.apache.logging.log4j:log4j-api:$log4jVersion"
            testImplementation "org.apache.logging.log4j:log4j-core:$log4jVersion"
            testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
            testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
            testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
            testImplementation "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
        }

        task copyArtifacts {
            doLast {
                def version = getVersionName()
                def DIST_DEST_DIR = "$rootDir/hartshorn-assembly/distributions/$date"
                def DIRT_SRC_DIR = "$buildDir/libs"

                ant.mkdir(dir: DIST_DEST_DIR)
                println("Copying all built files of ${it.name} version $version-$date to $DIST_DEST_DIR")
                ant.copy(todir: DIST_DEST_DIR) {
                    fileset dir: DIRT_SRC_DIR,
                            includes: "*$version-$date*.jar"
                }

            }
        }
        build.finalizedBy copyArtifacts
    }
}
