/*
 * Copyright 2019-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.owasp:dependency-check-gradle:$owaspDependencyCheckVersion"
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'org.cadixdev.licenser' version "$licenserVersion"
    id 'org.checkerframework' version "$checkerFrameworkVersion"
}

apply plugin: 'org.owasp.dependencycheck'

version = projectVersion
group project.projectGroup

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

dependencyCheck {
    // Strict rule, even small vulnerabilities should be handled unless they are suppressed
    failBuildOnCVSS = 1
    failOnError = true
}

subprojects { final Project subProject ->
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'org.checkerframework'
    apply plugin: 'org.cadixdev.licenser'

    license {
        header = rootProject.file("HEADER.txt")
        ignoreFailures = false
        include '**/*.java'
    }

    sourceCompatibility = 17
    targetCompatibility = 17

    group = projectGroup
    version = projectVersion
    archivesBaseName = subProject.name
    description = "$projectName $projectVersion ($subProject.name)"

    tasks.build {
        dependsOn tasks.updateLicenses
        finalizedBy tasks.clean
    }
}

allprojects {
    plugins.withType(JavaPlugin) {
        configurations.all {
            resolutionStrategy.dependencySubstitution {
                rootDir.listFiles().each {
                    if (it.isDirectory() && new File(it, "${it.name}.gradle").exists()) {
                        substitute module("org.dockbox.hartshorn:${it.name}") using project(":$it.name")
                    }
                }
            }
        }

        repositories {
            mavenCentral()
            maven {
                name 'Jitpack'
                url 'https://jitpack.io'
            }
            maven {
                name 'm2-dv8tion'
                url 'https://m2.dv8tion.net/releases'
            }
        }

        configurations {
            testImplementation.extendsFrom(implementation)
            all*.exclude group: 'junit', module: 'junit'
        }

        tasks.withType(JavaCompile) {
            options.compilerArgs << '-parameters'
            options.encoding = 'UTF-8'
        }

        test {
            useJUnitPlatform()
            maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        }

        tasks.withType(Javadoc) {
            failOnError false
            options.addStringOption('Xdoclint:none', '-quiet')
            options.addStringOption('encoding', 'UTF-8')
            options.addStringOption('charSet', 'UTF-8')
        }

        dependencies {
            implementation "org.slf4j:slf4j-api:$slf4jVersion"
            implementation "jakarta.persistence:jakarta.persistence-api:$jakartaPersistenceVersion"

            testImplementation project(":hartshorn-test-suite")
            testImplementation "org.mockito:mockito-inline:$mockitoVersion"
            testImplementation "org.hamcrest:hamcrest:$hamcrestVersion"
            testImplementation "ch.qos.logback:logback-classic:$logbackVersion"
            testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
            testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
            testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
        }

        task copyArtifacts {
            doLast {
                final def version = projectVersion
                final def DIST_DEST_DIR = "$rootDir/hartshorn-assembly/distributions/$version"
                final def DIRT_SRC_DIR = "$buildDir/libs"

                ant.mkdir(dir: DIST_DEST_DIR)
                ant.copy(todir: DIST_DEST_DIR) {
                    fileset dir: DIRT_SRC_DIR,
                            includes: "*$version*.jar"
                }

            }
        }
        build.finalizedBy copyArtifacts
    }
}
