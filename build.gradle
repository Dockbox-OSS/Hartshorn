/*
 *  Copyright (C) 2020 Guus Lieben
 *
 *  This framework is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 2.1 of the
 *  License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 *  the GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this library. If not, see {@literal<http://www.gnu.org/licenses/>}.
 */



import java.time.LocalDate

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm' version '1.4.0'
    id 'org.jetbrains.dokka' version '1.4.10'
}

def getVersionName = { ->
    return 'git rev-parse --verify --short HEAD'.execute().text.trim()
}

version = getVersionName()
group = project.pluginGroup
description = 'Common sources for Selene extensions'
def junitVersion = '5.3.2'
def configurateVersion = '3.6.1'

subprojects { Project subProject ->
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'org.jetbrains.dokka'

    def date = LocalDate.now().toString()
    group = project.pluginGroup
    version = "${getVersionName()}-$date"

    task copyArtifacts {
        doLast {
            def version = getVersionName()
            def DIST_DEST_DIR = "${rootDir}/dist/${date}/${version}"
            def DIRT_SRC_DIR = "${buildDir}/libs"

            ant.mkdir(dir: DIST_DEST_DIR)
            ant.copy(todir: DIST_DEST_DIR) {
                fileset dir: DIRT_SRC_DIR,
                        includes: "*${version}-${date}*.jar"
            }

        }
    }

    build.finalizedBy copyArtifacts

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    tasks.build.dependsOn tasks.shadowJar

    shadowJar {
        relocate 'com.fasterxml.jackson', 'org.dockbox.selene.internal.jackson'
        relocate 'org.apache.commons', 'org.dockbox.selene.internal.apache.commons'
    }
}

allprojects {
    plugins.withType(JavaPlugin) {
        repositories {
            mavenCentral()
            jcenter()
            maven {
                name 'Jitpack'
                url 'https://jitpack.io'
            }
            maven {
                name 'fawe'
                url 'http://ci.athion.net/job/FastAsyncWorldEdit/ws/mvn/'
            }
            maven {
                name 'sk89q'
                url 'https://maven.enginehub.org/repo/'
            }
            maven {
                name 'plotsquared'
                url 'https://plotsquared.com/mvn/'
            }
            maven { // Only used for Configurate, not for platform implementations
                name 'Sponge maven repo'
                url 'https://repo.spongepowered.org/maven'
            }
        }

        dependencies {
            compile('net.dv8tion:JDA:4.1.1_155') {
                exclude module: 'opus-java'
            }

            // Required plugins for all platforms
            compileOnly 'com.boydti:fawe-api:latest'
            compileOnly 'com.sk89q.worldedit:worldedit-core:6.1'
            compileOnly 'com.plotsquared:plotsquared-api:3.1'

            // Included by some platforms, should be shadowed by platforms if it isn't already available
            compileOnly "org.spongepowered:configurate-core:$configurateVersion"

            // Typically included by platforms
            compileOnly 'org.slf4j:slf4j-api:1.7.25'

            // Testing requirements
            testCompile "org.junit.jupiter:junit-jupiter-api:$junitVersion"
            testCompile "org.junit.jupiter:junit-jupiter-params:$junitVersion"
            testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

            testCompile "org.mockito:mockito-all:1.10.19"

            testImplementation 'com.boydti:fawe-api:latest'
            testImplementation 'com.sk89q.worldedit:worldedit-core:6.1'
            testImplementation 'com.plotsquared:plotsquared-api:3.1'
        }

        test {
            useJUnitPlatform()
        }
    }
}

afterEvaluate {
    build.finalizedBy dokkaJavadocCollector
    dokkaJavadocCollector.finalizedBy relocateDokka
}

task relocateDokka {
    doLast {
        def DOKKA_DEST_DIR = "${rootDir}/docs"
        def DOKKA_SRC_DIR = "${buildDir}/dokka/javadocCollector"

        delete DOKKA_DEST_DIR

        ant.mkdir(dir: DOKKA_DEST_DIR)
        ant.copy(todir: DOKKA_DEST_DIR) {
            fileset dir: DOKKA_SRC_DIR
        }
    }
}
