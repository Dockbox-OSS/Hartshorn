import java.time.LocalDate

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.2"
    }
}

plugins {
    id 'java-library'
}

def getVersionName = { ->
    return 'git rev-parse --verify --short HEAD'.execute().text.trim()
}

version = getVersionName()
group = project.pluginGroup
description = 'Common sources for Darwin Server plugins'

subprojects { Project subProject ->
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'com.github.johnrengelman.shadow'

    def date = LocalDate.now().toString()
    group = project.pluginGroup
    version = "${getVersionName()}-$date"

    task copyArtifacts {
        doLast {
            def version = getVersionName()
            def DIST_DEST_DIR = "${rootDir}/dist/${date}/${version}"
            def DIRT_SRC_DIR = "${buildDir}/libs"

            ant.mkdir(dir: DIST_DEST_DIR)
            ant.copy(todir: DIST_DEST_DIR) {
                fileset dir: DIRT_SRC_DIR,
                        includes: "*.jar"
            }

            def DOCS_DEST_DIR = "${rootDir}/javadoc"
            def DOCS_SRC_DIR = "${buildDir}/docs/javadoc"

            delete DOCS_DEST_DIR // Remove old JavaDocs

            ant.mkdir(dir: DOCS_DEST_DIR)
            ant.copy(todir: DOCS_DEST_DIR) {
                fileset dir: DOCS_SRC_DIR
            }

            delete buildDir
        }
    }

    afterEvaluate {
        def buildTask = subProject.tasks.find { it.name == 'build' }
        if (buildTask) {
            buildTask.finalizedBy(javadoc)
        }
        def docTask = subProject.tasks.find { it.name == 'javadoc' }
        if (docTask) {
            docTask.finalizedBy(copyArtifacts)
        }
    }

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    tasks.build.dependsOn tasks.shadowJar

    shadowJar {
        relocate 'com.fasterxml.jackson', 'com.darwinreforged.internal.jackson'
        relocate 'org.apache.commons', 'com.darwinreforged.internal.apache.commons'
    }
}

allprojects {
    plugins.withType(JavaPlugin) {
        repositories {
            mavenCentral()
            jcenter()
        }

        dependencies {
            compile ('net.dv8tion:JDA:4.ALPHA.0_76') {
                exclude module: 'opus-java'
            }
        }
    }
}
