import java.time.LocalDate

/*
 *  Copyright (C) 2020 Guus Lieben
 *
 *  This framework is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 2.1 of the
 *  License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 *  the GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this library. If not, see {@literal<http://www.gnu.org/licenses/>}.
 */
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'io.franzbecker:gradle-lombok:1.6'
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'org.cadixdev.licenser' version '0.5.0'
    id 'de.lukaskoerfer.gradle.delombok' version '0.2'
}

static def getVersionName() {
    return 'git rev-parse --verify --short HEAD'.execute().text.trim()
}

version = getVersionName()
group project.pluginGroup
description 'Common sources for Hartshorn services'
def date = LocalDate.now().toString()

subprojects { Project subProject ->
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'org.cadixdev.licenser'
    apply plugin: 'de.lukaskoerfer.gradle.delombok'

    license {
        header = rootProject.file("HEADER.txt")
        ignoreFailures = true
        include '**/*.java'
    }

    group project.pluginGroup
    version = "${getVersionName()}-$date"

    sourceCompatibility = 16
    targetCompatibility = 16

    tasks.build {
        dependsOn tasks.updateLicenses
        finalizedBy tasks.clean
    }

    javadoc {
        dependsOn delombok
        failOnError = false
    }

}

allprojects {
    plugins.withType(JavaPlugin) {
        repositories {
            mavenCentral()
            maven {
                name 'Jitpack'
                url 'https://jitpack.io'
            }
        }

        configurations {
            include
            implementation.extendsFrom(include)
            testImplementation.extendsFrom(include)

            share
            api.extendsFrom(share)
            testImplementation.extendsFrom(share)

            all*.exclude group: 'junit', module: 'junit'
        }

        compileJava {
            options.compilerArgs << '-parameters'
            options.encoding = 'UTF-8'
        }

        compileTestJava {
            options.compilerArgs << '-parameters'
            options.encoding = 'UTF-8'
        }

        javadoc.options.encoding = 'UTF-8'

        dependencies {
            include 'com.mortennobel:java-image-scaling:0.8.6'
            include 'com.jhlabs:filters:2.0.235-1'

            // Typically included by platforms
            include "org.slf4j:slf4j-api:$slf4jVersion"

            // Compile/source dependencies
            include("org.jetbrains:annotations:$jetbrainsAnnotationsVersion")

            // Lombok
            include 'org.projectlombok:lombok:1.18.20'
            annotationProcessor 'org.projectlombok:lombok:1.18.20'
            testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'

            // Testing requirements
            testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
            testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
            testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
            testImplementation "org.hamcrest:java-hamcrest:$hamcrestVersion"

            testImplementation "org.mockito:mockito-inline:$mockitoVersion"

            testImplementation testFixtures(project(":hartshorn-test"))

            testImplementation "org.slf4j:slf4j-api:$slf4jVersion"
            testImplementation "org.slf4j:slf4j-simple:$slf4jVersion"
        }

        test {
            useJUnitPlatform()
        }
    }
}

task aggregatedJavadocs(type: Javadoc, description: 'Generate javadocs from all submodules', group: 'Documentation') {
    destinationDir = file "./docs"
    title = "Hartshorn (commit #$version)"
    options.author true
    options.links 'http://docs.spring.io/spring/docs/4.3.x/javadoc-api/', 'http://docs.oracle.com/javase/8/docs/api/', 'http://docs.spring.io/spring-ws/docs/2.3.0.RELEASE/api/', 'http://docs.spring.io/spring-security/site/docs/4.0.4.RELEASE/apidocs/'
    options.addStringOption 'Xdoclint:none', '-quiet'

    delete "./docs"

    subprojects.each { proj ->
        proj.tasks.withType(Javadoc).each { javadocTask ->
            source += javadocTask.source
            classpath += javadocTask.classpath
            excludes += javadocTask.excludes
            includes += javadocTask.includes
        }
    }
}

wrapper { gradleVersion = '5.6' }
