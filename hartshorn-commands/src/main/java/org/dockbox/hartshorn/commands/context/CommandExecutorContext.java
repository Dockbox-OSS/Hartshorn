/*
 * Copyright (C) 2020 Guus Lieben
 *
 * This framework is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 * the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library. If not, see {@literal<http://www.gnu.org/licenses/>}.
 */

package org.dockbox.hartshorn.commands.context;

import org.dockbox.hartshorn.commands.CommandExecutor;
import org.dockbox.hartshorn.commands.CommandParser;
import org.dockbox.hartshorn.commands.definition.ArgumentConverter;
import org.dockbox.hartshorn.commands.source.CommandSource;
import org.dockbox.hartshorn.di.context.Context;

import java.lang.reflect.AnnotatedElement;
import java.util.List;

/**
 * The context related to a {@link CommandExecutor}, containing information which is typically
 * required before a command is executed.
 */
public interface CommandExecutorContext extends Context {

    /**
     * Gets the {@link CommandExecutor} which is capable of executing a command.
     * @return The executor.
     */
    CommandExecutor executor();

    /**
     * Checks if a provided raw command matches the contained definition. This typically validates the given
     * arguments, flags, and command alias. This is typically handed off to a contained {@link CommandDefinitionContext}.
     * @param command The raw command.
     * @return <code>true</code> if the command matches, else <code>false</code>
     */
    boolean accepts(String command);

    /**
     * Strips the given raw command to contain only the argument and flag values. If <code>parentOnly</code> is
     * <code>true</code> and the executor is a child/sub command the alias of the child command is not stripped.
     * If <code>parentOnly</code> is <code>false</code> both parent and child aliases are stripped.
     * <p>For example, when a raw command is as follows:
     * <pre><code>
     *     "parentAlias childAlias argumentA --flagB"
     * </code></pre>
     * Then stripping with <code>parentOnly</code> set to <code>true</code> will return:
     * <pre><code>
     *     "childAlias argumentA --flagB"
     * </code></pre>
     * While the returned value with <code>parentOnly</code> set to <code>false</code> is:
     * <pre><code>
     *     "argumentA --flagB"
     * </code></pre>
     * @param command The raw command.
     * @param parentOnly Whether to also include the child alias when stripping the command.
     * @return The stripped command.
     */
    String strip(String command, boolean parentOnly);

    /**
     * Gets all possible aliases for the command. This is typically delegated to {@link CommandDefinitionContext#aliases()}.
     * @return The aliases.
     */
    List<String> aliases();

    /**
     * Gets the parent of the command, or {@link Void}. This is typically delegated to
     * {@link CommandDefinitionContext#parent()}.
     * @return The parent of the command.
     */
    Class<?> parent();

    /**
     * Gets the {@link AnnotatedElement} behind this executor. This element is typically a {@link java.lang.reflect.Method} but
     * may deviate from this in custom use-cases. This should only be accessed internally and by a {@link org.dockbox.hartshorn.commands.extension.CommandExecutorExtension}.
     * @return The annotated element.
     */
    AnnotatedElement element();

    /**
     * Gets the suggestions to complete the currently incomplete argument or flag. This may either be an alias, or element value,
     * or both. When no suggestions are known an empty list is returned. Element values are typically generated by underlying
     * {@link ArgumentConverter converters} using {@link ArgumentConverter#suggestions(CommandSource, String)}.
     * @param source The source of the command.
     * @param command The raw command.
     * @param parser The parser associated with the source.
     * @return The list of suggestions, or an empty list.
     */
    List<String> suggestions(CommandSource source, String command, CommandParser parser);
}
