import java.time.LocalDate

/*
 *  Copyright (C) 2020 Guus Lieben
 *
 *  This framework is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 2.1 of the
 *  License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 *  the GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this library. If not, see {@literal<http://www.gnu.org/licenses/>}.
 */

plugins {
    id 'java'
    id 'org.spongepowered.plugin' version '0.9.0'
}

archivesBaseName = 'selene-sponge-api7'
group = project.pluginGroup
description = 'Sponge API7.x implementation for Selene'
sponge.plugin.id = pluginId
def date = LocalDate.now().toString()

repositories {
    maven {
        name 'Nucleus'
        url 'http://repo.drnaylor.co.uk/artifactory/list/minecraft'
    }
}

dependencies {
    compile project(':selene-core')
    compile(project(':selene-common')) {
        exclude group: "org.spongepowered", module: "configurate**"
    }
    new File(parent.rootDir, 'modules').listFiles().each {
        if (it.directory && new File(it, 'build.gradle').exists()) {
            compile(project(":modules:${it.name}"))
            testCompileOnly(project(":modules:${it.name}"))
        }
    }
    compile project(':modules')
    compile(project(':selene-nms-1.12')) {
        exclude group: 'net.minecraftforge', module: 'forge'
    }

    compileOnly "me.lucko.luckperms:luckperms-api:$luckPermsVersion"
    compileOnly ("org.spongepowered:spongeapi:$spongeApi7Version") {
        exclude group: "org.spongepowered", module: "configurate**"
    }
    compileOnly("org.spongepowered:spongecommon:$spongeCommon7Version") {
        exclude group: "org.spongepowered", module: "configurate**"
    }
    compileOnly "com.github.Eufranio:MagiBridge:$magiBridgeVersion"
    compileOnly "com.github.MultiChat:Development:$multiChatVersion"
    compileOnly "com.github.flash-labs:FlashLibs:$flashLibsVersion"
    compileOnly "com.sk89q.worldedit:worldedit-sponge:$worldEditSpongeVersion"
    compileOnly "io.github.nucleuspowered:nucleus-api:$nucleusApiVersion"

    compileOnly 'io.netty:netty-all:4.1.24.Final'

    testCompileOnly project(':selene-core')
    testCompileOnly(project(':selene-common')) {
        exclude group: "org.spongepowered", module: "configurate**"
    }
    testCompileOnly project(':modules')
    testCompileOnly(project(':selene-nms-1.12')) {
        exclude group: 'net.minecraftforge', module: 'forge'
    }

    if (findProject(':darwin') != null) {
        compile project(':darwin')
        testCompileOnly project(':darwin')
    }

    compileOnly files('libs/PacketGate-0.1.2.jar')
}

shadowJar {
    exclude 'net/minecraft/**'
}

task prepareServerArtifacts(dependsOn: build) {
    doLast {
        def version = getVersionName()
        def DIST_DIR = "${rootDir}/dist/${date}/${version}"
        def PLUGIN_DIR = "${rootDir}/servers/sponge-112/plugins"

        delete fileTree(PLUGIN_DIR).matching {
            include "**/*selene*.jar"
        }

        println("Copying from: $DIST_DIR:")
        println("$archivesBaseName-$version-${date}-all.jar")
        println("Copying to: $PLUGIN_DIR")
        ant.copy(todir: PLUGIN_DIR) {
            fileset dir: DIST_DIR,
                    includes: "$archivesBaseName-$version-${date}-all.jar"
        }
    }
}
task runDevServer(dependsOn: prepareServerArtifacts) {
    doLast {
        javaexec {
            workingDir = "${project.rootDir}/servers/sponge-112"
            main = "-jar"
            args = [
                    "-Xmx6G",
                    "-Dsponge.debugcauseframes=true",
                    "-Xdebug",
                    "-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005",
                    "${project.rootDir}/servers/sponge-112/forge-1.12.2-2709.jar"
            ]
        }
    }
}

task copyArtifacts {
    doLast {
        def version = getVersionName()
        def DIST_DEST_DIR = "${rootDir}/dist/${date}/${version}"
        def DIRT_SRC_DIR = "${buildDir}/libs"

        ant.mkdir(dir: DIST_DEST_DIR)
        println("Copying all built files to $DIST_DEST_DIR")
        ant.copy(todir: DIST_DEST_DIR) {
            fileset dir: DIRT_SRC_DIR,
                    includes: "*${version}-${date}*.jar"
        }

    }
}

build.finalizedBy copyArtifacts
prepareServerArtifacts.dependsOn build
runDevServer.dependsOn prepareServerArtifacts
