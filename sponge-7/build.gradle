import java.time.LocalDate

/*
 *  Copyright (C) 2020 Guus Lieben
 *
 *  This framework is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 2.1 of the
 *  License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 *  the GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this library. If not, see {@literal<http://www.gnu.org/licenses/>}.
 */

plugins {
    id 'java'
    id 'org.spongepowered.plugin' version '0.9.0'
}

archivesBaseName = 'selene-sponge-api7'
group = project.pluginGroup
description = 'Sponge API7.x implementation for Selene'
sponge.plugin.id = pluginId
def date = LocalDate.now().toString()

repositories {
    maven {
        name 'Nucleus'
        url 'http://repo.drnaylor.co.uk/artifactory/list/minecraft'
    }
}

dependencies {
    compile project(path: ':selene-core', configuration: 'shadow')
    compile project(path: ':selene-common', configuration: 'shadow')
    compile project(path: ':extensions', configuration: 'shadow')

    compileOnly "me.lucko.luckperms:luckperms-api:$luckPermsVersion"
    compileOnly "org.spongepowered:spongeapi:$spongeApi7Version"
    compileOnly "org.spongepowered:spongecommon:$spongeCommon7Version"
    compileOnly "com.github.Eufranio:MagiBridge:$magiBridgeVersion"
    compileOnly "com.github.MultiChat:Development:$multiChatVersion"
    compileOnly "com.sk89q.worldedit:worldedit-sponge:$worldEditSpongeVersion"
    compileOnly "io.github.nucleuspowered:nucleus-api:$nucleusApiVersion"

    testCompileOnly project(':selene-core')
    testCompileOnly project(':selene-common')
    testCompileOnly project(':extensions')

    if(file('../darwin').exists()){
        compile project(path: ':darwin', configuration: 'shadow')
        testCompileOnly project(':darwin')
    }
}

task prepareServerArtifacts(dependsOn: build) {
    doLast {
        def version = getVersionName()
        def DIST_DIR = "${rootDir}/dist/${date}/${version}"
        def PLUGIN_DIR = "${rootDir}/servers/sponge-112/plugins"

        delete fileTree(PLUGIN_DIR).matching {
            include "**/*selene*.jar"
        }

        println("Copying from: $DIST_DIR:")
        println("$archivesBaseName-$version-${date}.jar")
        println("Copying to: $PLUGIN_DIR")
        ant.copy(todir: PLUGIN_DIR) {
            fileset dir: DIST_DIR,
                    includes: "$archivesBaseName-$version-${date}.jar"
        }
    }
}
task runDevServer(dependsOn: prepareServerArtifacts) {
    doLast {
        javaexec {
            workingDir = "${project.rootDir}/servers/sponge-112"
            main = "-jar";
            args = [
                    "${project.rootDir}/servers/sponge-112/forge-1.12.2-2709.jar",
                    "-Xmx6G",
                    "-Dsponge.debugcauseframes=true"
            ]
        }
    }
}

prepareServerArtifacts.dependsOn build
runDevServer.dependsOn prepareServerArtifacts
