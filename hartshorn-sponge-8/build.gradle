import java.time.LocalDate
/*
 *  Copyright (C) 2020 Guus Lieben
 *
 *  This framework is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 2.1 of the
 *  License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 *  the GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this library. If not, see {@literal<http://www.gnu.org/licenses/>}.
 */

plugins {
    id 'base'
    id 'java-library'
    id 'org.spongepowered.gradle.plugin' version '1.1.1'
    id 'org.spongepowered.gradle.vanilla' version '0.2'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

archivesBaseName = 'hartshorn-sponge-api8'
description = 'Sponge API8.x implementation for Hartshorn'
def date = LocalDate.now().toString()

repositories {
    mavenCentral()
    maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
    maven { url 'https://repo-new.spongepowered.org/maven' }
}

configurations {
    includeShadow
    include.extendsFrom(includeShadow)
    shadow.extendsFrom(includeShadow)
}

minecraft {
    version("1.16.5")
    platform(org.spongepowered.gradle.vanilla.repository.MinecraftPlatform.SERVER)
}

sponge {
    apiVersion('8.0.0')
    plugin('hartshorn') {
        loader(org.spongepowered.gradle.plugin.config.PluginLoaders.JAVA_PLAIN)
        displayName('Hartshorn')
        mainClass('org.dockbox.hartshorn.sponge.Sponge8Application')
    }
}

def ignoreProjects = ['examples', 'hartshorn-sponge-8']

dependencies {
    new File(parent.rootDir, 'hartshorn-minecraft').listFiles().each {
        if ((!ignoreProjects.contains(it.name)) && it.directory && new File(it, 'build.gradle').exists()) {
            includeShadow project(":hartshorn-minecraft:${it.name}")
        }
    }

    parent.rootDir.listFiles().each {
        if ((!ignoreProjects.contains(it.name)) && it.directory && new File(it, 'build.gradle').exists()) {
            includeShadow project(":${it.name}")
        }
    }

    includeShadow "org.xerial:sqlite-jdbc:$xerialSqliteJdbcVersion"
}

tasks.build {
    dependsOn tasks.shadowJar
}

shadowJar {
    configurations = [project.configurations.shadow]
    relocate 'com.fasterxml.jackson', 'org.dockbox.hartshorn.internal.jackson'
    relocate 'org.apache.commons', 'org.dockbox.hartshorn.internal.apache.commons'

    dependencies {
        exclude(dependency('org.projectlombok:lombok'))
        exclude(dependency('org.slf4j:slf4j-api'))
    }
}

task copyArtifacts {
    doLast {
        def version = getVersionName()
        def DIST_DEST_DIR = "${rootDir}/hartshorn-assembly/distributions"
        def DIRT_SRC_DIR = "${buildDir}/libs"

        ant.mkdir(dir: DIST_DEST_DIR)
        println("Copying all built files to $DIST_DEST_DIR")
        ant.copy(todir: DIST_DEST_DIR) {
            fileset dir: DIRT_SRC_DIR,
                    includes: "*${version}-${date}*.jar"
        }

    }
}

task relocateHartshornDistribution(dependsOn: build) {
    doLast {
        def configDir = new File("${project.projectDir}/run/config/services/hartshorn")
        delete fileTree(configDir).matching {
            include 'hartshorn.yml'
        }

        copy {
            from rootDir
            into configDir
            include 'hartshorn.yml'
        }
    }
}

build.finalizedBy copyArtifacts
relocateHartshornDistribution.dependsOn build
runServer.dependsOn relocateHartshornDistribution
