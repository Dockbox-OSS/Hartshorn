/*
 * Copyright (C) 2020 Guus Lieben
 *
 * This framework is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 * the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library. If not, see {@literal<http://www.gnu.org/licenses/>}.
 */

package org.dockbox.hartshorn.demo.persistence.services;

import org.dockbox.hartshorn.demo.persistence.domain.User;
import org.dockbox.hartshorn.demo.persistence.events.UserCreatedEvent;
import org.dockbox.hartshorn.di.annotations.component.Component;
import org.dockbox.hartshorn.di.context.ApplicationContext;
import org.dockbox.hartshorn.events.EventBus;
import org.dockbox.hartshorn.events.annotations.Posting;
import org.dockbox.hartshorn.persistence.SqlService;

import javax.inject.Inject;

/**
 * A simple component providing utility functions through a combination of injected services. Note that
 * unlike a service, a component does not automatically register functional methods (e.g. those annotated
 * with {@link org.dockbox.hartshorn.commands.annotations.Command} or {@link org.dockbox.hartshorn.events.annotations.Listener}
 * and instead only allows field injection. This improves construction times, as {@link org.dockbox.hartshorn.di.services.ServiceProcessor service processors}
 * do not activate on components.
 */
@Component
/* Indicates this type is responsible for firing the UserCreated event. This serves solely to satisfy the EventValidator, so any unhandled events are noticed on startup */
@Posting(UserCreatedEvent.class)
public class UserPersistence {

    @Inject
    private SqlService sqlService;
    @Inject
    private EventBus eventBus;

    /**
     * Creates a new {@link User} with the given {@code name} and {@code age}, but without a {@code id}.
     * After the {@link User} is created, it is saved to the injected {@link SqlService}, which is configured
     * through the {@link org.dockbox.hartshorn.di.binding.Provider} method {@link org.dockbox.hartshorn.demo.persistence.PersistenceDemoConfiguration#sql(ApplicationContext)}.
     * <p>After the user has been persisted, and the {@code id} has been generated by the {@link SqlService},
     * a {@link UserCreatedEvent} is posted, activating {@link EventListenerService#on(UserCreatedEvent)} which
     * logs the action.
     */
    public User createUser(final String name, final int age) {
        final User user = new User(name, age);
        this.sqlService.save(user);
        this.eventBus.post(new UserCreatedEvent(user));
        return user;
    }

}
